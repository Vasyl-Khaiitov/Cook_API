{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Tasteorama app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "Tasteorama is a culinary API that allows users to create, edit, and view recipes. Supports registration, login, subscriptions, reviews, categories, regions, and content."
  },
  "servers": [
    {
      "url": "https://api.tasteorama.com/v1",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3030",
      "description": "Local development"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Registration and login"
    },
    {
      "name": "Recipes",
      "description": "Recipe operations"
    },
    {
      "name": "Users",
      "description": "Users and subscriptions"
    },
    {
      "name": "Ingredients",
      "description": "Ingredients"
    },
    {
      "name": "Categories",
      "description": "Recipe categories"
    },
    {
      "name": "Areas",
      "description": "Regions"
    },
    {
      "name": "Testimonials",
      "description": "User reviews"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User registration",
        "operationId": "registerUser",
        "description": "**User Registration**\n\nCreates a new user account in the system.  \nThe user must provide their full name, a valid and unique email address, a secure password,  \nand confirm acceptance of the privacy policy.  \n\n### Notes\n- All fields are required.\n- Passwords should be at least 8 characters and include letters, numbers, and symbols.\n- A unique email is required for each account.\n- On success, an access token is returned for authenticated requests.\n",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The user's name",
                    "example": "Gigi Hadid"
                  },
                  "email": {
                    "type": "string",
                    "description": "The user's email",
                    "example": "gigihadid@model.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "The user's password",
                    "example": "BestModel111"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "User created successfully"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "bIHHDtBrjM3x61fcXQWrBiB0vvA/Fu0Z25YLbpAm"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/409"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "operationId": "loginUser",
        "description": "**User Login**\n\nAllows a registered user to log in by providing their email and password.\n\n### Required Fields\n- **Email**: The email address associated with the account.\n- **Password**: The account password.\n\n### Notes\n- On success, an access token is returned for authenticating further requests.\n- No authentication is required to access this endpoint.\n",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The user's email",
                    "example": "gigihadid@model.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "The user's password",
                    "example": "BestModel111"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "**Successfully Logged In**\n\nThe login was successful, and an access token has been provided. Use this token for subsequent authenticated requests.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200,
                      "description": "HTTP status code indicating a successful login"
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successfully!",
                      "description": "Confirmation message indicating successful login"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                          "description": "The access token to be used for authenticated requests"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh session accessToken",
        "operationId": "refresh",
        "description": "Refresh session accessToken",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully refreshed a session!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User logout",
        "operationId": "logoutUser",
        "description": "Log out a user",
        "security": [],
        "responses": {
          "204": {
            "description": "**No Content**\n\nThe user was successfully logged out. There is no content in the response body, only the status code 204 indicating a successful logout.\n",
            "content": {}
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/recipes": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get list of recipes",
        "operationId": "getRecipesServices",
        "description": "Get all public recipes",
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 12
            }
          },
          {
            "in": "query",
            "name": "categories",
            "schema": {
              "type": "string",
              "example": "Desert"
            },
            "description": "Filter recipes by category"
          },
          {
            "in": "query",
            "name": "ingredients",
            "schema": {
              "type": "string",
              "example": "65ca70d9ae7f10c88b598399,65ca70d9ae7f10c88b5983aa"
            },
            "description": "A list of ingredient IDs, to be separated by commas, for filtering recipes"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "example": "Tomato"
            },
            "description": "Search recipes by partial match in the title (case-insensitive)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found recipes!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found recipes!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Recipes"
                          }
                        },
                        "page": {
                          "type": "number",
                          "example": 2
                        },
                        "perPage": {
                          "type": "number",
                          "example": 4
                        },
                        "totalItems": {
                          "type": "number",
                          "example": 4
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 8
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/recipes/{id}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get recipe by id",
        "operationId": "getRecipeById",
        "description": "Get recipe by id",
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get recipe by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contact with id 65ca67e7ae7f10c88b598384!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/Recipes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get list of categories",
        "operationId": "getCategories",
        "description": "Get list of all available recipe categories.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully found categories!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found categories!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ingredients": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Get list of ingredients",
        "operationId": "getIngredients",
        "description": "Get list of all available ingredients.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully found ingredients!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found ingredients!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ingredients"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "operationId": "getCurrentUser",
        "description": "Returns data about the currently logged-in user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found current user!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found current user!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/{id}/favorite": {
      "post": {
        "summary": "Add a recipe to user favorites",
        "operationId": "addRecipeToFavorites",
        "tags": [
          "Recipes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the recipe to add to favorites",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe successfully added to favorites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe added to favorites"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad Request"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found - Session or Authorization header not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404,
                  "description": "HTTP status code"
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError",
                  "description": "Error message indicating that the resource was not found"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Session not found",
                      "description": "Detailed message about the missing session or header"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "examples": {
              "no_token": {
                "summary": "Session not found",
                "value": {
                  "status": 404,
                  "message": "NotFoundError",
                  "data": {
                    "message": "Session not found"
                  }
                }
              },
              "token_expired": {
                "summary": "Authorization header not found",
                "value": {
                  "status": 404,
                  "message": "NotFoundError",
                  "data": {
                    "message": "Authorization header not found"
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "**Conflict Error (409)**\n\nThis error occurs when there is a conflict with the current state of the resource.\n- In this case, the conflict arises because the `email` provided is already in use by another account.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP status code indicating the error type.",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "description": "A brief summary of the conflict error.",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message",
                    "errors"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Specific details about the error, such as the conflicting field.",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong on the server."
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "Recipes": {
        "type": "object",
        "required": [
          "title",
          "category",
          "instructions",
          "description",
          "ingredients"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "65ca67e7ae7f10c88b598384"
          },
          "title": {
            "type": "string",
            "maxLength": 64,
            "example": "Tomato Soup",
            "description": "Recipe title (max 64 chars, required)"
          },
          "description": {
            "type": "string",
            "maxLength": 200,
            "example": "A simple and delicious tomato soup.",
            "description": "Short description of the recipe (max 200 chars, required)"
          },
          "cookiesTime": {
            "type": "integer",
            "minimum": 1,
            "maximum": 360,
            "example": 45,
            "description": "Cooking time in minutes (1 to 360, required)"
          },
          "cals": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10000,
            "example": 320,
            "description": "Calories amount (1 to 10000, optional)"
          },
          "category": {
            "type": "string",
            "example": "Soups",
            "description": "Category of the recipe (must match existing category, required)"
          },
          "ingredients": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "description": "Ingredient ID (must exist in ingredients collection)",
              "example": "65ca70d9ae7f10c88b598399"
            }
          },
          "ingredientAmount": {
            "type": "integer",
            "minimum": 2,
            "maximum": 16,
            "example": 3,
            "description": "Number of ingredients (2 to 16, required)"
          },
          "instructions": {
            "type": "string",
            "maxLength": 1200,
            "example": "Boil water, add tomatoes, cook for 20 minutes...",
            "description": "Full cooking instructions (max 1200 chars, required)"
          },
          "recipeImg": {
            "type": "string",
            "format": "binary",
            "description": "Recipe image file (max 2Mb, optional)"
          },
          "owner": {
            "type": "string",
            "description": "User ID who created the recipe",
            "example": "65c99e3f9a9f1c87b1234567"
          },
          "area": {
            "type": "string",
            "description": "Reference to area ID",
            "example": "65c99e3f9a9f1c87b7654321"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-21T10:15:30.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-21T10:15:30.000Z"
          }
        }
      },
      "Category": {
        "type": "object",
        "required": [
          "_id",
          "name"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "64a1c2f3a6d4b4c8d9e1a123"
          },
          "name": {
            "type": "string",
            "example": "Desserts"
          }
        }
      },
      "Ingredients": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "desc"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "64a1c2f3a6d4b4c8d9e1a123"
          },
          "name": {
            "type": "string",
            "example": "Desserts"
          },
          "desc": {
            "type": "string",
            "example": "Fresh red tomato used in salads and sauces."
          },
          "img": {
            "type": [
              "string",
              "null"
            ],
            "example": "https://cdn.tasteorama.com/images/tomato.png"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-20T14:22:15.123Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-20T14:25:45.456Z"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "name",
          "email"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique user ID",
            "example": "64e8a6c5f9a5a12b34567890"
          },
          "name": {
            "type": "string",
            "description": "User's full name",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "john.doe@example.com"
          }
        }
      }
    }
  }
}